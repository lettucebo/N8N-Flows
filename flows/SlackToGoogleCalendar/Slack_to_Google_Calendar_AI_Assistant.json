{
  "name": "Slack to Google Calendar AI Assistant",
  "nodes": [
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "channelId": {
          "__rl": true,
          "mode": "id",
          "value": "C08NVUQUK8F"
        },
        "options": {}
      },
      "id": "8c0ad7b0-a88c-4be8-9010-d45e3203e9c0",
      "name": "Slack Trigger",
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        240,
        460
      ],
      "webhookId": "d8c9a4e7-f3d5-4c2a-9b8e-1234567890ab",
      "credentials": {
        "slackApi": {
          "id": "H8RWtu7aOphSXGk5",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "=={{$json.channel}}",
              "operation": "contains",
              "value2": "C08NVUQUK8F"
            },
            {
              "value1": "={{$json.type}}",
              "value2": "message"
            },
            {
              "value1": "={{$json.bot_id}}",
              "operation": "isEmpty"
            },
            {
              "value1": "={{$json.subtype}}",
              "operation": "isEmpty"
            },
            {
              "value1": "={{$json.thread_ts}}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "id": "filter-slack-messages",
      "name": "Filter Channel Messages",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "functionCode": "// ===============================================\n// Process AI Response - 完整版 JavaScript 代碼\n// ===============================================\n\nconsole.log('🚀 開始處理 AI 回應...');\n\n// 1. 檢查基本輸入\nconst inputData = $input.first();\nif (!inputData || !inputData.json) {\n  console.log('❌ 沒有輸入數據，停止執行');\n  return [];\n}\n\nconsole.log('📥 輸入數據:', JSON.stringify(inputData.json, null, 2));\n\n// 2. 取得 AI 輸出（從 text 欄位）\nconst aiResponseText = inputData.json.text || inputData.json.output;\nif (!aiResponseText) {\n  console.log('❌ AI 沒有輸出文字，停止執行');\n  return [];\n}\n\nconsole.log('🤖 AI 原始回應:', aiResponseText);\n\n// 3. 解析 JSON 字串\nlet aiOutput;\ntry {\n  // 清理可能的 markdown 格式\n  const cleanResponse = aiResponseText.replace(/```json\\n?|```\\n?/g, '').trim();\n  aiOutput = JSON.parse(cleanResponse);\n  console.log('✅ 解析後的 AI 輸出:', JSON.stringify(aiOutput, null, 2));\n} catch (error) {\n  console.log('❌ JSON 解析失敗:', error.message);\n  return [{\n    json: {\n      status: 'error',\n      error: `AI 回應解析失敗: ${error.message}`,\n      rawResponse: aiResponseText,\n      slackUser: 'unknown',\n      slackChannel: 'unknown',\n      slackTimestamp: Date.now().toString()\n    }\n  }];\n}\n\n// 4. 檢查 Slack 原始數據\nlet slackData = {};\ntry {\n  // 嘗試多種方式取得 Slack 數據\n  if ($node && $node[0] && $node[0].json) {\n    slackData = $node[0].json;\n  } else if ($('Webhook') && $('Webhook').first()) {\n    slackData = $('Webhook').first().json;\n  } else if ($('Slack Webhook') && $('Slack Webhook').first()) {\n    slackData = $('Slack Webhook').first().json;\n  } else {\n    // 如果無法取得原始數據，使用預設值\n    slackData = {\n      text: '無法取得原始訊息',\n      user: 'unknown',\n      channel: 'unknown',\n      ts: Date.now().toString()\n    };\n  }\n  console.log('📱 Slack 數據:', JSON.stringify(slackData, null, 2));\n} catch (error) {\n  console.log('⚠️ 取得 Slack 數據時發生錯誤:', error.message);\n  slackData = {\n    text: '無法取得原始訊息',\n    user: 'unknown', \n    channel: 'unknown',\n    ts: Date.now().toString()\n  };\n}\n\n// 5. 檢查 AI 是否找到事件\nif (!aiOutput.hasEvent || !aiOutput.events || aiOutput.events.length === 0) {\n  console.log('ℹ️ AI 沒有找到事件');\n  return [{\n    json: {\n      status: 'no_event',\n      message: '未找到有效的日程信息',\n      originalMessage: slackData.text,\n      slackUser: slackData.user,\n      slackChannel: slackData.channel,\n      slackTimestamp: slackData.ts,\n      reasoning: aiOutput.reasoning || '無法識別日程相關內容'\n    }\n  }];\n}\n\n// 6. 處理找到的事件（支援全天活動）\nconsole.log(`📅 找到 ${aiOutput.events.length} 個事件，開始處理`);\n\ntry {\n  const processedEvents = aiOutput.events.map((event, index) => {\n    console.log(`🔄 處理事件 ${index}:`, JSON.stringify(event, null, 2));\n    \n    // 驗證事件是否有必要欄位\n    if (!event.title && !event.startDateTime) {\n      console.log(`⚠️ 事件 ${index} 缺少必要欄位，跳過`);\n      return null;\n    }\n\n    // 🎯 處理全天活動與部分時間活動\n    let startDateTime, endDateTime, isAllDay = false;\n    let calendarStartDateTime, calendarEndDateTime;\n    \n    try {\n      // 檢查是否為全天活動\n      const isAllDayEvent = event.isAllDay === true || \n                           (!event.startDateTime.includes('T') && !event.endDateTime.includes('T'));\n      \n      if (isAllDayEvent) {\n        // 📅 全天活動處理\n        console.log(`📅 事件 ${index} 是全天活動`);\n        isAllDay = true;\n        \n        // 確保日期格式正確 (YYYY-MM-DD)\n        startDateTime = event.startDateTime.includes('T') \n          ? event.startDateTime.split('T')[0] \n          : event.startDateTime;\n        endDateTime = event.endDateTime.includes('T') \n          ? event.endDateTime.split('T')[0] \n          : event.endDateTime;\n          \n        // Google Calendar 全天活動格式：純日期字串\n        calendarStartDateTime = startDateTime;\n        calendarEndDateTime = endDateTime;\n        \n        // 驗證日期格式\n        if (!startDateTime.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n          throw new Error('全天活動日期格式錯誤');\n        }\n        \n        console.log(`✅ 全天活動時間: ${startDateTime} 到 ${endDateTime}`);\n        \n      } else {\n        // ⏰ 部分時間活動處理\n        console.log(`⏰ 事件 ${index} 是部分時間活動`);\n        isAllDay = false;\n        \n        const startDate = new Date(event.startDateTime);\n        const endDate = new Date(event.endDateTime);\n        \n        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n          throw new Error('無效的日期時間格式');\n        }\n        \n        // 確保結束時間在開始時間之後\n        if (endDate <= startDate) {\n          endDate.setTime(startDate.getTime() + 60 * 60 * 1000);\n        }\n        \n        startDateTime = startDate.toISOString();\n        endDateTime = endDate.toISOString();\n        \n        // Google Calendar 部分時間活動格式：完整 ISO 字串\n        calendarStartDateTime = startDateTime;\n        calendarEndDateTime = endDateTime;\n        \n        console.log(`✅ 部分時間活動: ${startDateTime} 到 ${endDateTime}`);\n      }\n      \n    } catch (dateError) {\n      console.log(`⚠️ 事件 ${index} 時間處理失敗，使用預設:`, dateError.message);\n      \n      // 預設為明天的全天活動\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      const dateStr = tomorrow.toISOString().split('T')[0];\n      \n      startDateTime = dateStr;\n      endDateTime = dateStr;\n      calendarStartDateTime = dateStr;\n      calendarEndDateTime = dateStr;\n      isAllDay = true;\n    }\n    \n    // 處理參與者列表\n    const attendees = (event.attendees || []).filter(email => \n      email && email.includes('@') && email.includes('.')\n    );\n    \n    // 確保 confidence 是浮點數\n    const confidence = parseFloat(event.confidence) || 0.5;\n    console.log(`📊 事件 ${index} 信心度: ${confidence} (${Math.round(confidence * 100)}%)`);\n    \n    // 構建詳細描述\n    const description = [\n      event.description || '',\n      '',\n      '📋 來源信息：',\n      `• Slack 訊息: ${slackData.text}`,\n      `• 發送者: <@${slackData.user}>`,\n      `• 頻道: <#${slackData.channel}>`,\n      `• 活動類型: ${isAllDay ? '📅 全天活動' : '⏰ 部分時間活動'}`,\n      `• AI 分析信心度: ${Math.round(confidence * 100)}%`,\n      aiOutput.reasoning ? `• 分析說明: ${aiOutput.reasoning}` : ''\n    ].filter(line => line !== '').join('\\n');\n    \n    // 🎯 根據信心度決定處理策略\n    let eventStatus;\n    if (confidence >= 0.7) {\n      eventStatus = 'high_confidence';\n      console.log(`✅ 事件 ${index} 高信心度，自動處理`);\n    } else {\n      eventStatus = 'low_confidence';\n      console.log(`⚠️ 事件 ${index} 低信心度，需要確認`);\n    }\n    \n    const processedEvent = {\n      json: {\n        eventIndex: index,\n        title: event.title || '未命名事件',\n        description: description,\n        \n        // 📅 時間信息\n        startDateTime: calendarStartDateTime,\n        endDateTime: calendarEndDateTime,\n        isAllDay: isAllDay,\n        \n        // 📍 地點和參與者\n        location: event.location || '',\n        attendees: attendees,\n        \n        // 📊 分析信息\n        confidence: confidence,\n        reasoning: aiOutput.reasoning || '',\n        \n        // 📱 原始信息\n        originalMessage: slackData.text,\n        slackUser: slackData.user,\n        slackChannel: slackData.channel,\n        slackTimestamp: slackData.ts,\n        \n        // 🔄 處理狀態\n        status: eventStatus\n      }\n    };\n    \n    console.log(`✅ 事件 ${index} 處理完成:`, JSON.stringify(processedEvent.json, null, 2));\n    return processedEvent;\n  }).filter(event => event !== null);\n\n  // 7. 檢查是否有有效的處理結果\n  if (processedEvents.length === 0) {\n    console.log('❌ 沒有有效的事件可處理');\n    return [{\n      json: {\n        status: 'error',\n        error: '所有事件都處理失敗',\n        originalMessage: slackData.text,\n        slackUser: slackData.user,\n        slackChannel: slackData.channel,\n        slackTimestamp: slackData.ts\n      }\n    }];\n  }\n\n  console.log(`🎉 成功處理 ${processedEvents.length} 個事件`);\n  console.log('📤 最終輸出:', JSON.stringify(processedEvents, null, 2));\n  \n  return processedEvents;\n  \n} catch (error) {\n  console.log('❌ 處理事件時發生錯誤:', error.message);\n  console.log('🔍 錯誤堆疊:', error.stack);\n  \n  return [{\n    json: {\n      status: 'error',\n      error: `處理失敗: ${error.message}`,\n      originalMessage: slackData.text,\n      slackUser: slackData.user,\n      slackChannel: slackData.channel,\n      slackTimestamp: slackData.ts,\n      debugInfo: {\n        errorStack: error.stack,\n        inputData: inputData.json,\n        aiOutput: aiOutput\n      }\n    }\n  }];\n}\n\n// ===============================================\n// Confidence Filter 替代函數 (可選)\n// ===============================================\n\n/*\n// 如果你想在 Process AI Response 中直接處理信心度過濾，\n// 可以在上面的代碼中使用這個邏輯替代單獨的 Confidence Filter 節點：\n\nfunction filterByConfidence(events) {\n  const highConfidenceEvents = [];\n  const lowConfidenceEvents = [];\n  \n  events.forEach(event => {\n    if (event.json.confidence >= 0.7) {\n      event.json.status = 'high_confidence';\n      highConfidenceEvents.push(event);\n    } else {\n      event.json.status = 'low_confidence';\n      lowConfidenceEvents.push(event);\n    }\n  });\n  \n  return { highConfidenceEvents, lowConfidenceEvents };\n}\n*/\n\n// ===============================================\n// 調試輔助函數\n// ===============================================\n\n/*\n// 如果需要調試，可以在任何地方使用這個函數：\n\nfunction debugData(label, data) {\n  console.log(`🔍 ${label}:`);\n  console.log('- 數據類型:', typeof data);\n  console.log('- 數據內容:', JSON.stringify(data, null, 2));\n  console.log('- 是否為空:', !data);\n  console.log('- 是否為對象:', typeof data === 'object');\n  console.log('---');\n}\n\n// 使用範例：\n// debugData('AI 輸出', aiOutput);\n// debugData('Confidence 值', event.confidence);\n*/"
      },
      "id": "3cc251c9-728f-417b-a80a-207290d6290e",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1056,
        460
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{parseFloat($json.confidence) >= 0.7}}",
              "value2": true
            }
          ]
        }
      },
      "id": "46555180-f9e7-44c4-b114-f941adc13adc",
      "name": "Confidence Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1280,
        460
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "abc12207@gmail.com",
          "mode": "list",
          "cachedResultName": "abc12207@gmail.com"
        },
        "start": "={{$json.startDateTime}}",
        "end": "={{$json.endDateTime}}",
        "useDefaultReminders": false,
        "additionalFields": {
          "allday": "yes",
          "description": "={{$json.description}}",
          "location": "={{$json.location}}",
          "maxAttendees": 50,
          "sendUpdates": "none",
          "summary": "={{$json.title}}"
        },
        "remindersUi": {
          "remindersValues": [
            {
              "method": "popup",
              "minutes": 180
            }
          ]
        }
      },
      "id": "9b1a9087-efb1-4346-9680-09673497b489",
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1716,
        260
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "ERUGcDCTMJESC4hA",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "channel": "=C08NVUQUK8F",
        "text": "=🎉 *行事曆事件創建成功！*\n\n📝 *{{$json.summary}}*\n\n🗓️ *活動類型：* {{$json.start.date ? '全天活動' : '定時活動'}}\n📅 *日期：* {{$json.start.date ? new Date($json.start.date + 'T12:00:00').toLocaleDateString('zh-TW', {year: 'numeric', month: '2-digit', day: '2-digit', weekday: 'long'}) : new Date($json.start.dateTime).toLocaleDateString('zh-TW', {timeZone: 'Asia/Taipei'})}}\n⏰ *時間：* {{$json.start.date ? '整天' : new Date($json.start.dateTime).toLocaleTimeString('zh-TW', {hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Taipei'}) + ' - ' + new Date($json.end.dateTime).toLocaleTimeString('zh-TW', {hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Taipei'})}}\n📍 *地點：* {{$json.location || '未指定'}}\n\n📋 *活動詳情：*\n{{$json.description ? $json.description.substring(0, 300) + ($json.description.length > 300 ? '...' : '') : '請查看完整行事曆'}}\n\n🔗 [*查看完整行事曆事件*](<{{$json.htmlLink}}>)\n\n_🤖 由 AI 助手自動創建 • 事件ID: `{{$json.id}}`_\n_✨ 祝你活動順利愉快！ ✨_",
        "otherOptions": {},
        "attachments": []
      },
      "id": "d8a44d97-e601-40ea-a28b-cb847da06bcf",
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1936,
        360
      ],
      "credentials": {
        "slackApi": {
          "id": "H8RWtu7aOphSXGk5",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "channel": "={{$json.slackChannel}}",
        "otherOptions": {},
        "attachments": []
      },
      "id": "a19c1160-28c0-4c90-acb2-c0cfff0e2fa9",
      "name": "Low Confidence Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        1496,
        560
      ],
      "credentials": {
        "slackApi": {
          "id": "H8RWtu7aOphSXGk5",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "channel": "={{$('Slack Trigger1').first().json.event.channel}}",
        "otherOptions": {},
        "attachments": []
      },
      "id": "bfd47b15-51f6-48fd-862c-5deb0febc4a5",
      "name": "Error Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        240,
        820
      ],
      "credentials": {
        "slackApi": {
          "id": "H8RWtu7aOphSXGk5",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=={{$json.text}}",
        "messages": {
          "messageValues": [
            {
              "message": "=你是一個專業的日程管理助手。請分析用戶的 Slack 訊息，提取可能的日程信息。\n\n🎯 **重要原則：每個分析結果只產生一個主要事件，將所有相關活動整合為完整的活動描述**\n\n🔍 **地點偵測規則**：\n1. 移動動詞後的地點：「去XX」、「到XX」、「往XX」、「赴XX」、「前往XX」、「出發到XX」、「飛往XX」\n2. 位置介詞後的地點：「在XX」、「於XX」、「位於XX」、「XX舉行」、「XX進行」、「XX召開」\n3. 常見地點類型：城市/國家、地標/景點、場所、線上場所、建築物\n4. 地點提取優先順序：具體地址 > 建築名稱 > 城市名稱 > 區域名稱\n5. 多地點活動：選擇主要集合地點或最重要的地點作為主要 location\n\n📅 **活動類型識別（重要）**：\n- **全天活動**：\n  - 旅遊、一日遊、出差、休假、節日慶典\n  - 研習營、工作坊、訓練營\n  - 多地點行程活動（即使有集合時間也算全天活動）\n  - 只提到日期沒有具體時間\n- **定時活動**：\n  - 單一地點的會議、簡報\n  - 有明確開始和結束時間的短時間活動\n  - 非旅遊性質的定時聚會\n\n⏰ **時間格式規則**：\n- 全天活動：startDateTime 和 endDateTime 都設為 \"YYYY-MM-DD\"（不包含時間部分），isAllDay: true\n- 定時活動：使用完整的 ISO 8601 格式 \"YYYY-MM-DDTHH:mm:ss+08:00\"，isAllDay: false\n- **年份推斷規則**：\n  - 如果訊息中明確指定年份，使用該年份\n  - 如果只有月/日沒有年份，推斷邏輯：\n    - 若月份大於當前月份，使用當前年份\n    - 若月份小於當前月份，使用下一年份\n    - 若未指定年份且無法推斷，預設使用 2025 年\n- 時區：Asia/Taipei (+08:00)\n\n⚠️ **重要提醒**：\n- 旅遊、一日遊、多地點活動即使有集合時間，也應該設為全天活動\n- 全天活動的開始和結束時間應該相同，格式為純日期\n\n📋 **詳細描述內容建構**：\n必須包含以下資訊（如果訊息中有提及）：\n1. **集合資訊**：集合時間、集合地點、停車資訊\n2. **完整行程**：按時間順序列出所有活動安排\n3. **費用明細**：各項費用（交通、餐費、門票等）\n4. **參與者資訊**：車手安排、參加人員\n5. **攜帶物品**：需要準備的物品或衣物\n6. **注意事項**：天氣、取消條件、其他重要提醒\n7. **聯絡資訊**：相關連結、參考資料（保持完整網址）\n\n👥 **參與者提取規則**：\n- **重要：attendees 欄位請保持空陣列 []，避免發送 Google Calendar 通知**\n- 所有參與者資訊（包含車手和乘客）都寫在 description 中\n- 這樣可以避免 Google Calendar 自動發送邀請通知\n\n💰 **費用資訊提取**：\n- 交通費、餐費、門票、其他雜費\n- 在 description 中詳細說明各項費用\n\n🔗 **連結處理**：\n- 保持網址完整，不要截斷\n- 如果連結太長，確保包含完整的可點擊網址\n\n🎯 **信心度評估**：\n- 0.9+：完整時間+地點+詳細行程+參與者資訊\n- 0.7-0.9：明確時間和地點，部分詳細資訊\n- 0.5-0.7：基本時間或地點，缺少詳細資訊\n- <0.5：缺乏關鍵信息\n\n請按照以下 JSON 格式回覆，不要添加任何其他文字：\n{\n  \"hasEvent\": true,\n  \"events\": [\n    {\n      \"title\": \"主要活動標題\",\n      \"description\": \"詳細的活動描述，包含完整行程安排、集合資訊、費用明細、參與者資訊、注意事項等\",\n      \"startDateTime\": \"2025-06-29\",\n      \"endDateTime\": \"2025-06-29\", \n      \"isAllDay\": true,\n      \"location\": \"主要集合地點或最重要的地點\",\n      \"attendees\": [],\n      \"confidence\": 0.95\n    }\n  ],\n  \"reasoning\": \"分析原因，說明如何整合多個活動為單一事件，以及信心度評估依據\"\n}\n\n**活動類型判斷範例**：\n- ✅ 全天活動：「三峽瀑布一日遊」→ isAllDay: true, startDateTime: \"2025-06-29\"\n- ✅ 全天活動：「工作坊」→ isAllDay: true, startDateTime: \"2025-06-15\"  \n- ✅ 定時活動：「下午2點開會」→ isAllDay: false, startDateTime: \"2025-06-01T14:00:00+08:00\"\n- ✅ 定時活動：「簡報1小時」→ isAllDay: false, startDateTime: \"2025-06-01T14:00:00+08:00\"\n\n**描述格式建議**：\n使用清晰的結構化格式，將所有參與者資訊寫在描述中：\n```\n集合時間：9:30 a.m.；集合地點：三峽區竹崙路238號（禾煦熊空茶園外碰面+停車）。\n\n行程安排：\n• 上午：參訪禾煦熊空茶園\n• 中午：三峽插角133現烤胡椒雞用餐  \n• 下午：雲森瀑布健行+玩水泡腳\n• 傍晚：三峽老街自由活動\n\n費用：車資200元；餐費200-400元；茶園門票280元（可抵餐點100元）。\n\n車手安排：\n• @小泉：Vivian, Conni, Lucia\n• @bryan：Ting, Vera, 哲瑋\n• @韋成：小張, 謝小玥, 王美惠\n• @Money Yu：其他參與者\n\n注意事項：遇雨取消/改期，請攜帶換洗衣物。\n```\n\n現在請分析以下 Slack 訊息：「={{$json.text}}」\n\n請將整個活動視為一個完整事件，把所有細節、行程安排、參與者資訊都整理在 description 中，直接回覆 JSON 格式，不要包含 ```json 標記。"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        680,
        460
      ],
      "id": "8647c7c5-4e06-482e-8fd8-df39c3077d31",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        768,
        680
      ],
      "id": "2dafdd15-fc8c-468f-ab93-caf25ce29c9f",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "CtgkMRzzV4whz91f",
          "name": "Azure Open AI account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "abc12207@gmail.com",
          "mode": "list",
          "cachedResultName": "abc12207@gmail.com"
        },
        "start": "={{$json.startDateTime}}",
        "end": "={{$json.endDateTime}}",
        "useDefaultReminders": false,
        "additionalFields": {
          "allday": "no",
          "description": "={{$json.description}}",
          "location": "={{$json.location}}",
          "maxAttendees": 50,
          "sendUpdates": "none",
          "summary": "={{$json.title}}"
        },
        "remindersUi": {
          "remindersValues": [
            {
              "method": "popup",
              "minutes": 180
            },
            {
              "method": "popup",
              "minutes": 90
            },
            {
              "method": "popup",
              "minutes": 10
            },
            {
              "method": "popup",
              "minutes": 1
            }
          ]
        }
      },
      "id": "0f6d6c00-f47a-400f-b443-3b7c0ac88fc8",
      "name": "Create Calendar Event3",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1716,
        460
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "ERUGcDCTMJESC4hA",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "fbf960d0-2def-463d-9c6b-e9fa9d63368a",
              "leftValue": "={{ $json.isAllDay }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1496,
        360
      ],
      "id": "1c707ca2-6571-4347-a56b-3e79f85d99bc",
      "name": "All Day Event branch"
    }
  ],
  "pinData": {},
  "connections": {
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Filter Channel Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Channel Messages": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Confidence Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confidence Filter": {
      "main": [
        [
          {
            "node": "All Day Event branch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Low Confidence Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event3": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "All Day Event branch": {
      "main": [
        [
          {
            "node": "Create Calendar Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Calendar Event3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "executionTimeout": 3600,
    "timezone": "UTC"
  },
  "versionId": "79cea021-4b56-49e4-a812-e92af9302a58",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4f325a7cd315a1a79ed49dc0c3f91bbcfea6ece3018280e4ffc9f22ce531b657"
  },
  "id": "I2dch7ZKvBvX6GVC",
  "tags": []
}